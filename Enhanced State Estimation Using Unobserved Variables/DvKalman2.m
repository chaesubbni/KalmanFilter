%손칼만 연구원은 요즘 신형 열차의 성능 시험으로 바쁘다. 시험 내용은 직선 선로에서 열차가 80m/s의 속도를 유지하는지 확인하는 것이다. 
%위치와 속도 정보는 0.1초 간격으로 측정해서 저장하도록 되어 있다.
%그런데 시험 결과를 살펴보던 손칼만 연구원의 얼굴이 갑자기 사색으로 변했다. 이 사실을 위에서 알면 난리가 날 게 뻔하다. 그나마
%다행인 것은 위치 정보는 이상이 없어 보인다는 점이다.
%우리의 손칼만 연구원을 이 위기에서 구해 낼 방법은 없을까?

function [pos,vel] = DvKalman2(z)
%   시스템 모델
%   xk -> [위치,속도]'.
%   xk+1 = Axk + wk, zk = Hxk + vk

persistent A H Q R
persistent x P
persistent firstRun

if isempty(firstRun)
    dt = 0.1;
    A = [1 dt;
         0 1];
    H = [0 1];
    Q = [1 0;
         0 3];
    R = 20;
    x = [0 20]';
    P = 5*eye(2);
    firstRun = 1;
end

%추정값 예측값(상태 방정식으로 예측값 구함), 오차 공분산 예측값
xp = A*x; % 추정값 예측 상태일 땐 노이즈 안 넣어줌.노이즈는 오직 오차 공분산이랑 측정할 때 넣어줌.
Pp = A*P*A' + Q; % 대신 오차 공분산에 넣어 예측함. 즉, 오차 공분산 예측

%칼만 이득 구함.
K = Pp*H'/(H*Pp*H' + R); % R이 작으면 측정 오차가 적은거니 측정값이 더 정확하다는 뜻 그러면 칼만 이득은 커짐.

%추정값, 오차 공분산 계산
x = xp + K*(z - H*xp);
P = Pp - K*H*Pp; % 칼만 이득에 따라 예측 오차 공분산에서 빼지는 값 크기가 달라짐. -> Kk가 크면 즉, 측정값이 더 정확해지면 오차 공분산 감소.

%추정값 반환
pos = x(1); 
vel = x(2);
